// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 2974556178212939465),
      name: 'Task',
      lastPropertyId: const IdUid(7, 7801230721307512663),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1112167387833973609),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2077276958533403468),
            name: 'status',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1447078981980048736),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4268028557364439007),
            name: 'subText1',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7801230721307512663),
            name: 'subText2',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 6767630845649796334),
      name: 'School',
      lastPropertyId: const IdUid(2, 4108497277324327119),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4248717157710886076),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5938559820341108902),
      name: 'Student',
      lastPropertyId: const IdUid(4, 543649517424813676),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1965285683576370959),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(4, 543649517424813676),
            name: 'schoolId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 5298672047960768757),
            relationTarget: 'School')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 4784641137743094440),
      name: 'Customer',
      lastPropertyId: const IdUid(1, 1963563480851811440),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1963563480851811440),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'orders', srcEntity: 'Orders', srcField: 'customer')
      ]),
  ModelEntity(
      id: const IdUid(7, 3507524268256657123),
      name: 'Orders',
      lastPropertyId: const IdUid(2, 4891977013916942631),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8531742946206855455),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4891977013916942631),
            name: 'customerId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 343120373219312782),
            relationTarget: 'Customer')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 3507524268256657123),
      lastIndexId: const IdUid(5, 343120373219312782),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7500343996566844411, 2726583068007302017],
      retiredIndexUids: const [8770448925397643574, 1798775736047885759],
      retiredPropertyUids: const [
        8679145622944608738,
        6791197980422716479,
        3512720168156430008,
        4901371138183582085,
        5760137928526746290,
        4108497277324327119,
        6408333106817054340,
        5860744847878043178,
        2403017905169836619
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Task: EntityDefinition<Task>(
        model: _entities[0],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final subText2Offset = object.subText2 == null
              ? null
              : fbb.writeString(object.subText2!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addBool(2, object.status);
          fbb.addOffset(3, textOffset);
          fbb.addInt64(5, object.subText1);
          fbb.addOffset(6, subText2Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Task(
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              subText1: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 14),
              subText2: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              status: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 8, false));

          return object;
        }),
    School: EntityDefinition<School>(
        model: _entities[1],
        toOneRelations: (School object) => [],
        toManyRelations: (School object) => {},
        getId: (School object) => object.id,
        setId: (School object, int id) {
          object.id = id;
        },
        objectToFB: (School object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = School(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Student: EntityDefinition<Student>(
        model: _entities[2],
        toOneRelations: (Student object) => [object.school],
        toManyRelations: (Student object) => {},
        getId: (Student object) => object.id,
        setId: (Student object, int id) {
          object.id = id;
        },
        objectToFB: (Student object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(3, object.school.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Student(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.school.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.school.attach(store);
          return object;
        }),
    Customer: EntityDefinition<Customer>(
        model: _entities[3],
        toOneRelations: (Customer object) => [],
        toManyRelations: (Customer object) => {
              RelInfo<Orders>.toOneBacklink(
                      2, object.id, (Orders srcObject) => srcObject.customer):
                  object.orders
            },
        getId: (Customer object) => object.id,
        setId: (Customer object, int id) {
          object.id = id;
        },
        objectToFB: (Customer object, fb.Builder fbb) {
          fbb.startTable(2);
          fbb.addInt64(0, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Customer(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          InternalToManyAccess.setRelInfo(
              object.orders,
              store,
              RelInfo<Orders>.toOneBacklink(
                  2, object.id, (Orders srcObject) => srcObject.customer),
              store.box<Customer>());
          return object;
        }),
    Orders: EntityDefinition<Orders>(
        model: _entities[4],
        toOneRelations: (Orders object) => [object.customer],
        toManyRelations: (Orders object) => {},
        getId: (Orders object) => object.id,
        setId: (Orders object, int id) {
          object.id = id;
        },
        objectToFB: (Orders object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.customer.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Orders(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.customer.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.customer.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// see [Task.status]
  static final status = QueryBooleanProperty<Task>(_entities[0].properties[1]);

  /// see [Task.text]
  static final text = QueryStringProperty<Task>(_entities[0].properties[2]);

  /// see [Task.subText1]
  static final subText1 =
      QueryIntegerProperty<Task>(_entities[0].properties[3]);

  /// see [Task.subText2]
  static final subText2 = QueryStringProperty<Task>(_entities[0].properties[4]);
}

/// [School] entity fields to define ObjectBox queries.
class School_ {
  /// see [School.id]
  static final id = QueryIntegerProperty<School>(_entities[1].properties[0]);
}

/// [Student] entity fields to define ObjectBox queries.
class Student_ {
  /// see [Student.id]
  static final id = QueryIntegerProperty<Student>(_entities[2].properties[0]);

  /// see [Student.school]
  static final school =
      QueryRelationToOne<Student, School>(_entities[2].properties[1]);
}

/// [Customer] entity fields to define ObjectBox queries.
class Customer_ {
  /// see [Customer.id]
  static final id = QueryIntegerProperty<Customer>(_entities[3].properties[0]);
}

/// [Orders] entity fields to define ObjectBox queries.
class Orders_ {
  /// see [Orders.id]
  static final id = QueryIntegerProperty<Orders>(_entities[4].properties[0]);

  /// see [Orders.customer]
  static final customer =
      QueryRelationToOne<Orders, Customer>(_entities[4].properties[1]);
}
